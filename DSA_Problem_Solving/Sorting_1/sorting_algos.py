################################################################################################################################################################################################################################################################################################################################################################################################################################################################

def insertion_sort(arr):
    
    n = len(arr)
    
    for i in range(1, n):
        
        j = i - 1
        
        while j >= 0:
            
            if A[j + 1] < A[j]:
                A[j + 1], A[j] = A[j], A[j + 1]
        
            j -= 1
        
        print(arr)
        print()

################################################################################################################################################################################################################################################################################################################################################################################################################################################################

def selection_sort(arr):
    
    n = len(arr)
    
    for i in range(n):
        
        min_idx = i
        
        for j in range(i + 1, n):
            
            if arr[j] < arr[min_idx]:
                min_idx = j
        
        if min_idx != i:

            arr[min_idx], arr[i] = arr[i], arr[min_idx]

################################################################################################################################################################################################################################################################################################################################################################################################################################################################
            
def bubble_sort(arr):
    
    n = len(arr)
    
    for i in range(n):
        
        for j in range(n - i - 1):
            
            if arr[j + 1] < arr[j]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

################################################################################################################################################################################################################################################################################################################################################################################################################################################################
def mergeSort(arr, i, j, tmp):

        if i == j:
            return
        
        mid = i + (j - i) // 2

        mergeSort(arr, i, mid, tmp)
        mergeSort(arr, mid + 1, j, tmp)
        merge(arr, i, j, tmp)
    
def merge(arr, i, j, tmp):

    mid = i + (j - i) // 2

    x, y, z = i, mid + 1, 0

    while x <= mid and y <= j:

        if arr[x] <= arr[y]:

            tmp[z] = arr[x]
            x += 1

        else:
            tmp[z] = arr[y]
            y += 1

        z += 1

    while x <= mid:
        tmp[z] = arr[x]
        x += 1
        z += 1

    while y <= j:
        tmp[z] = arr[y]
        y += 1
        z += 1

    for k in range(i, j + 1):
        arr[k] = tmp[k - i]

def main(arr):
    tmp = [0 for i in range(len(arr))]
    mergeSort(arr, 0, len(arr) - 1, tmp)

################################################################################################################################################################################################################################################################################################################################################################################################################################################################

import random

def quicksort(arr, s, e):
    
    if s >= e:
        return
    
    p = partition(arr, s, e)
    
    quicksort(arr, s, p - 1)
    quicksort(arr, p + 1, e)

def partition(arr, s, e):
    
    pivot = arr[e]
    p_ind = s
    
    for i in range(s, e):
        
        if arr[i] <= pivot:
            arr[i], arr[p_ind] = arr[p_ind], arr[i]
            p_ind += 1
    
    arr[p_ind], arr[e] = arr[e], arr[p_ind]
    
    return p_ind

def partition_2(arr, s, e):
    
    pivot = arr[e]
    p_ind = s
    
    # Count elements smaller than pivot
    cnt = 0
    for i in range(s, e):
        if arr[i] < pivot:
            cnt += 1
    
    # Place pivot at cnt - 1
    arr[e], arr[cnt - 1] = arr[cnt - 1], arr[e]
    
    l, r = s, e
    
    while l < r:
        
        # Case 1 Move forward on both if elements are in the right halves
        if arr[l] <= pivot and arr[r] > pivot:
            l += 1
            r -= 1
            
        # Case 2 If both elements are in the wrong halves, swap them
        elif arr[l] > pivot and arr[r] < pivot:
            arr[l], arr[r] = arr[r], arr[l]
            l += 1
            r -= 1
        # Case 3 If left element is in the wrong half, decrement right pointer to reach case 2
        elif arr[l] > pivot:
            r -= 1
        # Case 4 If right element is in wrong half, increment left pointer to reach case 2
        else:
            l += 1
        
        return cnt - 1
    
def gen_random(arr, s, e):
    
    idx = random.randrange(s, e)
    
    arr[e], arr[idx] = arr[idx], arr[e]

################################################################################################################################################################################################################################################################################################################################################################################################################################################################
